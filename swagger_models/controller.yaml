swagger: '2.0'
info:
  description: |
    ENMS Controller RESTful interface.
  version: 0.3.2
  title: Controller API
basePath: /
schemes:
  - http
  - https
paths:
  /nes:
    get:
      tags:
        - ctlNes
      summary: Get NEs
      description: get NEs from NMS
      produces:
        - application/json
      operationId: getNes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Ne'
    post:
      tags:
        - ctlNes      
      summary: Add NEs
      description: Add a new NE to NMS System
      produces:
        - application/json
      consumes:
        - application/json
      operationId: addNe
      parameters:
        - name: body
          in: body
          description: NE object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Ne'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Ne'
        '405':
          description: Invalid input
    put:
      tags:
        - ctlNes      
      summary: Update NE
      description: 'Update an existing NE. (Jersey doesn''t support Patch,so have to use PUT)'
      produces:
        - application/json
      consumes:
        - application/json
      operationId: updateNe
      parameters:
        - in: body
          name: body
          description: NE object that needs to be updated
          required: false
          schema:
            $ref: '#/definitions/Ne'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
        '405':
          description: Validation exception
  '/nes/{neid}':
    get:
      tags:
        - ctlNes     
      summary: Find NE by ID
      description: Returns an NE as per the ID
      produces:
        - application/json
      operationId: getNeById
      parameters:
        - in: path
          name: neid
          description: ID of NE that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Ne'
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
    delete:
      tags:
        - ctlNes     
      summary: Delete NE
      description: This can only be done by the logged in user.
      produces:
        - application/json
      operationId: deleteNe
      parameters:
        - in: path
          name: neid
          description: The NE's ID that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
  '/nes/type/{netype}':
    get:
      tags:
        - ctlNes      
      summary: Query NEs by type
      description: get NEs from NMS
      produces:
        - application/json
      operationId: findNesByType
      parameters:
        - name: netype
          in: path
          type: string
          required: true
          description: NE type to query
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Ne'
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
  '/nes/version/{neversion}':
    get:
      tags:
        - ctlNes      
      summary: Query NEs by version
      description: get NEs from NMS
      produces:
        - application/json
      operationId: findNesByVersion
      parameters:
        - name: neversion
          in: path
          type: string
          required: true
          description: NE version to query
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Ne'
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
  '/nes/type/{netype}/version/{neversion}':
    get:
      tags:
        - ctlNes      
      summary: Query NEs by type & version
      description: get NEs from NMS
      produces:
        - application/json
      operationId: findNeByTypeVersion
      parameters:
        - name: netype
          in: path
          type: string
          required: true
          description: NE type to query
        - name: neversion
          in: path
          type: string
          required: true
          description: NE version to query
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Ne'
        '400':
          description: Invalid ID supplied
        '404':
          description: NE not found
  /tps:
    get:
      tags:
        - ctlTps      
      summary: Get ports
      description: Get the ports with queries
      produces:
        - application/json
      operationId: getTps
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
    post:
      tags:
        - ctlTps      
      summary: Add TPs
      description: Store new TPs to Database
      produces:
        - application/json
      consumes:
        - application/json
      operationId: addTps
      parameters:
        - name: body
          in: body
          description: TP objects that needs to be added
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '405':
          description: Invalid input
    put:
      tags:
        - ctlTps      
      summary: Update TP
      description: 'Update an existing TP. (Jersey doesn''t support Patch,so have to use PUT)'
      produces:
        - application/json
      consumes:
        - application/json
      operationId: updateTp
      parameters:
        - in: body
          name: body
          description: TP object that needs to be updated
          required: false
          schema:
            $ref: '#/definitions/Tp'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid ID supplied
        '404':
          description: TP not found
        '405':
          description: Validation exception
  '/tps/{tpid}':
    get:
      tags:
        - ctlTps      
      summary: Find TP by tpid
      description: Returns a TP as per the tpid
      produces:
        - application/json
      operationId: getTpById
      parameters:
        - in: path
          name: tpid
          description: ID of TP that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tp'
        '400':
          description: Invalid tpid supplied
        '404':
          description: TP not found
  '/tps/{tpid}/children':
    get:
      tags:
        - ctlTps      
      summary: Find Children TPs by tpid
      description: Returns Children TPs of tpid
      produces:
        - application/json
      operationId: getChildrenTps
      parameters:
        - in: path
          name: tpid
          description: ID of TP that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '400':
          description: Invalid tpid supplied
        '404':
          description: Children TP not found
  '/tps/type/{tptype}':
    get:
      tags:
        - ctlTps      
      summary: Get ports
      description: Get the ports with queries
      produces:
        - application/json
      operationId: getTpsByType
      parameters:
        - name: tptype
          in: path
          required: true
          description: the TP type to query
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '400':
          description: Invalid tpid supplied
        '404':
          description: TP not found
  '/tps/ne/{neid}':
    get:
      tags:
        - ctlTps      
      summary: Find TP by neid
      description: Returns a TP as per the neid
      produces:
        - application/json
      operationId: getTpsByNeId
      parameters:
        - in: path
          name: neid
          description: NEID of TP that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '400':
          description: Invalid NE ID supplied
        '404':
          description: TP not found
  '/tps/ne/{neid}/tp/{tpid}':
    get:
      tags:
        - ctlTps      
      summary: Find CTPs by NE & PTP
      description: Returns CTPs as per the PTPID
      produces:
        - application/json
      operationId: getCtpsByTpId
      parameters:
        - in: path
          name: neid
          description: NEID of TP that needs to be fetched
          required: true
          type: string
        - in: path
          name: tpid
          description: TP Id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '400':
          description: Invalid Layer Rate supplied
        '404':
          description: TP not found
  '/tps/ne/{neid}/layer_rate/{layerrate}':
    get:
      tags:
        - ctlTps      
      summary: Find TPs by layerrate
      description: Returns TPs as per the layerrate
      produces:
        - application/json
      operationId: getTpsByLayerRate
      parameters:
        - in: path
          name: neid
          description: NEID of TP that needs to be fetched
          required: true
          type: string
        - in: path
          name: layerrate
          description: Layer Rate of TPs
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Tp'
        '400':
          description: Invalid Layer Rate supplied
        '404':
          description: TP not found
  '/equipments/{eqid}':
    get:
      tags:
        - ctlEquipments      
      summary: Find equipments by equipmentid
      description: Returns an equipment as per the eqid
      produces:
        - application/json
      operationId: getEquipmentById
      parameters:
        - in: path
          name: eqid
          description: ID of Equipment that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Equipment'
        '400':
          description: Invalid Equipment ID supplied
        '404':
          description: Equipment not found
  '/equipments/ne/{neid}':
    get:
      tags:
        - ctlEquipments      
      summary: Find equipments that belong to NE with neid
      description: Returns equipments as per the neid
      produces:
        - application/json
      operationId: getEquipmentsByNeId
      parameters:
        - in: path
          name: neid
          description: Equipments of NE that need to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Equipment'
        '400':
          description: Invalid NE ID supplied
        '404':
          description: Equipment not found
  /connections:
    get:
      tags:
        - ctlConnections      
      summary: Get connections
      description: get connections from NMS
      produces:
        - application/json
      operationId: getConnections
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Connection'
    post:
      tags:
        - ctlConnections      
      summary: Add Connection
      description: Add a new Connection to NMS System
      produces:
        - application/json
      consumes:
        - application/json
      operationId: addConnection
      parameters:
        - name: body
          in: body
          description: Connection object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Connection'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Connection'
        '405':
          description: Invalid input
  '/connections/{connectionid}':
    get:
      tags:
        - ctlConnections      
      summary: Get Connection
      description: Returns Connections as per the connectionid
      produces:
        - application/json
      operationId: getConnectionById
      parameters:
        - in: path
          name: connectionid
          description: Connection that need to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Connection'
        '400':
          description: Invalid connection ID supplied
        '404':
          description: CONNECTION not found
  '/connections/layer_rate/{layerrate}':
    get:
      tags:
        - ctlConnections      
      summary: Get Connections
      description: Returns Connections as per the layer rate
      produces:
        - application/json
      operationId: getConnectionsByLayerRate
      parameters:
        - in: path
          name: layerrate
          description: Connection layerrate that need to be fetched
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Connection'
        '400':
          description: Invalid connection ID supplied
        '404':
          description: CONNECTION not found
  '/connections/userlabel/{userlabel}':
    get:
      tags:
        - ctlConnections      
      summary: Get connections
      description: get connections from NMS
      produces:
        - application/json
      operationId: getConnectionByUserLabel
      parameters:
        - name: userlabel
          in: path
          type: string
          required: true
          description: userlabel of connection to query
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Connection'
        '404':
          description: CONNECTION not found
  '/connections/type/{connectiontype}':
    get:
      tags:
        - ctlConnections      
      summary: Get connections
      description: get connections from NMS
      produces:
        - application/json
      operationId: getConnectionsByType
      parameters:
        - name: connectiontype
          in: path
          type: string
          required: true
          description: connection type to query
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Connection'
        '404':
          description: CONNECTION not found
  /routes:
    get:
      tags:
        - ctlRoutes
      summary: Get routes
      description: get all routes
      produces:
        - application/json
      operationId: getAllRoutes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Route'
        '404':
          description: No route found
  '/routes/anode/{anodeid}/znode/{znodeid}':
    get:
      tags:
        - ctlRoutes
      summary: Get routes
      description: get all routes from a to z
      produces:
        - application/json
      operationId: getRoutesAtoZ
      parameters:
        - name: anodeid
          in: path
          type: string
          required: true
          description: the start point of the routes
        - name: znodeid
          in: path
          type: string
          required: true
          description: the end point of the routes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Route'
        '404':
          description: No route found
  /statistics/supported_ne_types:
    get:
      tags:
        - ctlStatistics
      summary: NE statistics
      description: Get supported NE types
      produces:
        - application/json
      operationId: getSupportedNeTypes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/NeStatistics'
        '404':
          description: No statistics found.
          
  /statistics/nes:
    get:
      tags:
        - ctlStatistics
      summary: NE number
      description: Get NE numbers as per NE Type
      produces:
        - application/json
      operationId: getNeNumbersPerType
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/NeStatistics'
        '404':
          description: No statistics found.
          
  /enms/hosts:
    get:
      tags:
        - ctlSystem
      summary: the host nodes in ENMS
      description: 'get the nodes in ENMS, including all Adapters, Controllers, DatacentBs.'
      produces:
        - application/json
      operationId: getAllNodes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Host'
        '404':
          description: No host found
    post:
      tags:
        - ctlSystem
      summary: Register Host
      description: Register host to NMS System
      produces:
        - application/json
      consumes:
        - application/json
      operationId: registerHost
      parameters:
        - name: body
          in: body
          description: host that needs to be registered
          required: true
          schema:
            $ref: '#/definitions/Host'
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
    delete:
      tags:
        - ctlSystem
      summary: Unregister Host
      description: Unregister host from NMS System
      produces:
        - application/json
      consumes:
        - application/json
      operationId: unRegisterHost
      parameters:
        - name: body
          in: body
          description: Host object that needs to be unregistered
          required: true
          schema:
            $ref: '#/definitions/Host'
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input

  /enms/config/supported_nes:
    get:
      tags:
        - ctlSystem
      summary: get supported NEs
      description: 'get the supported NEs in ENMS.'
      produces:
        - application/json
      operationId: getSupportedNes
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/SupportedNe'
        '404':
          description: No NE configurations found
          
  /enms/statuses/ne_statuses:
    post:
      tags:
        - ctlSystem
      summary: NE Status change
      description: Notify the NE status transition, from active to inactive or vice versa
      produces:
        - application/json
      consumes:
        - application/json
      operationId: notifyNeStatus
      parameters:
        - name: body
          in: body
          description: NE status change
          required: true
          schema:
            $ref: '#/definitions/NeAssignment'
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
  /enms/statuses/ping:
    get:
      tags:
        - ctlSystem
      summary: Heart Beat
      description: ENMS heart beat, to check the system health status
      produces:
        - application/json
      operationId: ping
      responses:
        '200':
          description: OK

          
definitions:
  Ne:
    type: object
    required:
      - userLabel
      - neType
    properties:
      id:
        type: string
        description: NE id, will be uuid later
      keyOnNe:
        type: string
        description: for Q3 NE it's moi , after setting it's read only
#      adapterType:
#        type: string
#        description: 'needed adapter type, include ALUQ3, pureSNMP,TL1, CLI etc.'
      userLabel:
        type: string
        example: NE01/01
 #     nativeName:
 #       type: string
      neType:
        type: string
        example: 1662mc
 #     techDomain:
 #       type: string
 #       description: the domain of NE technologies
 #       example: SDH|MSTP|PTN|OTN|IP|…
      version:
        type: string
#      address:
#        type: string
#        example: 4.700058e+23
#      addressType:
#        type: string
#        example: Q3|IPv4Telnet|IPv4SNMPv2|IPv4SNMPv3…
      addresses:
        $ref: "#/definitions/Addresses"
      adminState:
        type: boolean
        default: false
      supervisionState:
        type: string
        default: unsupervised
        enum:
        - supervisied
        - unsupervised
      communicationState:
        type: string
        default: unreachable
        enum:
        - reachable
        - unreachable
      synchState:
        type: string
        default: unsynchronized
        enum:
        - synchronized
        - unsynchronized
      maintenanceState:
        type: boolean
        default: false
      operationalState:
        type: string
        default: idle
        enum:
        - idle
        - supervising
        - synchState
        - connecting
        - synchronizing
#      alignmentStatus:
#        type: string
#        example: aligned/misaligned
#      loginName:
#        type: string
#        example: admin
#      password:
#        type: string
#        example: pwd
      locationName:
        type: string
      coordinates:
        $ref: "#/definitions/Coordinates"
      extraInfo:
        type: object
        properties:
           neUsmParameter:
             type: string

  RefTp:
    type: object
    description: TP Reference, just store partial TP information.
    properties:
      id:
        type: string
        example: 10000
      neId:
        type: string
        example: NE001
        
  Tp:
    type: object
    properties:
      id:
        type: string
        example: NE001
      keyOnNe:
        type: string
        description: th TP's key on NE, for Q3 NE include moi value without NE part
      neId:
        type: string
        description: Ne's ID
      parentTpId:
        description: The parent TP id for CTP case.
        type: string
      userLabel:
        type: string
        example: NE001/Port1
      nativeName:
        type: string
      layerRates:
        type: array
        description: the layerRates, the first one is key layerRate
        items:
          type: string
      tpType:
        type: string
        example: etc/sdh/wdm/stm16etc.
      usedByConnection:
        type: string
        default: "free"
        description: |
          Connection id that using the TP
          'free' - TP not used; 
          'xc' - TP occupied by XC, but this XC not belongs to connection
          >0 - real connection ID
      reservedBy:
        type: string
        description: |
          Before creating XC for CTP, reserve it first in DB by Controller, to avoid
          contention from other tasks. Use taskid or other info.
          When deleting an XC, need to clear this attribute.
      tpgMembers:
        type: array
        items:
          type: string
      comment:
        type: string

  Equipment:
    type: object
#    required:
#      - neId
    properties:
      id:
        type: string
      aid:
        type: string
        example: NE001/Board1
      neId:
        type: string
      userLabel:
        type: string
      nativeName:
        type: string
      addresses:
        $ref: "#/definitions/Addresses"
        
  Connection:
    type: object
    properties:
      id:
        type: string
        example: c12345
      userLabel:
        type: string
      nativeName:
        type: string
      layerRate:
        type: string
        example: STM16
      atps:
        type: array
        description: the list of TP IDs
        items:
#          type: string
          $ref: '#/definitions/RefTp'
      ztps:
        type: array
        description: the list of TP IDs
        items:
#          type: string
          $ref: '#/definitions/RefTp'
      connectionType:
        type: string
        example: P2P/Tree/Lan/Ring/group
        description: 'the type of the connection, ''group'' means it the connection group'
      groupMembers:
        type: array
        description: the list of Connection IDs
        items:
          type: string
#          $ref: '#/definitions/CONNECTION'
      serverConnections:
        type: array
        description: the list of Server connection IDs
        items:
          type: string
#          $ref: '#/definitions/CONNECTION'
      xcs:
        type: array
        description: the list of XC IDs
        items:
          type: string
#          $ref: '#/definitions/XC'
      direction:
        type: string
        example: bidirectional/unidirectional
      definitionTime:
        type: string
        example: '2016-07-11T12:01:02.000Z'

  Xc:
    type: object
    properties:
      id:
        type: string
      aid:
        type: string
      neId:
        type: string
#      ne:
#        $ref: '#/definitions/NE'
      layerrate:
        type: string
      atps:
        type: array
        description: the list of TP IDs
        items:
          type: string
#          $ref: '#/definitions/TP'
      ztps:
        type: array
        description: the list of TP IDs
        items:
          type: string
#          $ref: '#/definitions/TP'
      usedByConnection:
        type: string
        description: |
          Connection id that using the TP
          -1 - XC not used, isolated XC, need to be cleaned by NMS 
          0 - not valid, don't use this value
          >0 - real connection ID
      implStatus:
        type: string
        
  Route:
    type: object
    properties:
      sequence:
        type: integer
      xcs:
        type: array
        items:
          $ref: '#/definitions/Xc'
  Host:
    type: object
    description: 'The host in ENMS, inludes Controller, Adapter, DB etc.'
    properties:
      id:
        type: string
        description: 'the ID of the host, can be autogenerated.'
      type:
        type: string
        description: 'the type of the host, Adapter, Datacenter, Controller etc.'
        example: adapter
      ipAddress:
        type: string
        description: 'the IP Address of the host, IP:port'
#      port:
#        type: integer
      q3Address:
        type: string
        description: The Q3 Address for Adapter, blank if not applicable.
      remark:
        type: string
        description: extra info
        
  NeAssignment:
    type: object
    description: The NE assignment information, used for NE assignment and NE status report
    properties:
      adapter:
        $ref: "#/definitions/Host"
      assignTime:
        type: string
      status:
        type: string
        description: 'If the NE currently active on the adapter, active or inactive'
        example: active|inactive|disconnected
      neList:
        type: array
        items:
          $ref: '#/definitions/Ne'
      remark:
        type: string
        description: the extra info
  
  Addresses:
    type: object
    description: 'The Addresses of NE, Equipment'
    properties:
      q3Address:
        $ref: '#/definitions/Q3Address'
      tl1Address:
        type: array
        items:
          type: string
      snmpAddress:
        $ref: '#/definitions/SnmpAddress'
  SnmpAddress:
    type: object
    properties:
      snmpAgent:
        type: string
      snmpTraps:
        type: array
        items:
          type: string
  Q3Address:
    type: object
    properties:
      address:
        type: string
      osMain:
        type: string
      osSpare:
        type: string

#  Message:
#    type: object
#    properties:
#      sender:
#        type: string
#        description: 'the info of sender, for example: adapter-1 '
#      messageType:
#        type: string
#        description: notification or alarm
#      sendTime:
#        type: string
#      notification:
#        $ref: '#/definitions/Notification'
#      alarm:
#        $ref: '#/definitions/Alarm'    
#
#  Notification:
#    type: object
#    properties:
#      type:
#        type: string
#        description: the overall notification type, add,delete or update
#      objectType:
#        type: string
#        description: 'the object type of the notification: NE, Board, TP, Connection'
#      objectID:
#        type: string
#        description: the ID of the target Object.
#      details:
#        type: array
#        items:
#          $ref: '#/definitions/NotificationDetail'
#          
#  NotificationDetail:
#    type: object
#    properties:
#      type:
#        type: string
#        description: 'the change type of the detail field: add, delete or update'
#      key:
#        type: string
#      value:
#        type: string
#      oldValue:
#        type: string
#          
#  Alarm:
#    type: object
#    properties:
#      alarmCode:
#        type: string
#      alarmType:
#        type: string
#      severity:
#        type: string
#        description: severity of alarm, MAJOR, MINOR,CRITICAL,INFO,WARNING
#      occureTime:
#        type: string
#      clearTime:
#        type: string
#      probableCause:
#        type: string
#      objectType:
#        type: string
#        description: the object type of the alarm
#      moc:
#        type: string
#        description: the management object class
#      alarmObject:
#        type: string
#      ackStatus:
#        type: string
#        description: acknowledgement status, true or false
#      resvStatus:
#        type: string
#        description: reservation status
#      description:
#        type: string

  Coordinates:
    type: object
    description: The coordinates of the NE
    properties:
      geo:
        type: object
        properties:
          longitude:
            type: string
          latitude:
            type: string
      coordinate:
        type: object
        properties:
          x:
            type: string
          y:
            type: string              
    
  SupportedNe:
    type: object
    properties:
      neType:
        type: string
      versions:
        type: array
        items:
          type: string
      protocols:
        type: array
        items:
          type: string

  NeStatistics:
    type: object
    properties:
      sum:
        type: integer
      nes:
        type: array
        items:
          $ref: "#/definitions/NeStatisticsDetail"
          
  NeStatisticsDetail:
    type: object
    properties:
      neType:
        type: string
      sum:
        type: integer
        description: the count of the NE type
      versions:
        type: array
        description: the list of available NE versions
        items:
          type: string
      versionSum:
        type: array
        items:
          type: integer
          